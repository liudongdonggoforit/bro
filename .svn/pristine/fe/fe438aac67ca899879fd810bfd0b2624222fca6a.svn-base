package com.sh.browser.fragment;

import android.app.SearchManager;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.StrictMode;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatDelegate;
import android.text.InputType;
import android.text.method.KeyListener;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.view.inputmethod.InputMethodManager;
import android.webkit.ValueCallback;
import android.webkit.WebChromeClient;
import android.widget.AutoCompleteTextView;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.sh.browser.R;
import com.sh.browser.browser.AlbumController;
import com.sh.browser.browser.BrowserContainer;
import com.sh.browser.browser.BrowserController;
import com.sh.browser.services.HolderService;
import com.sh.browser.utils.BrowserUnit;
import com.sh.browser.utils.HelperUnit;
import com.sh.browser.utils.IntentUnit;
import com.sh.browser.utils.ViewUnit;
import com.sh.browser.views.NinjaRelativeLayout;
import com.sh.browser.views.NinjaToast;
import com.sh.browser.views.NinjaWebView;
import com.sh.browser.views.SwipeToBoundListener;
import com.sh.browser.views.SwitcherPanel;
import com.tencent.smtt.sdk.WebView;

/**
 * 浏览器页面
 */
public class BrowserFragment extends BaseFragment implements BrowserController,View.OnClickListener {
    private SwitcherPanel switcherPanel;

    private AutoCompleteTextView inputBox;
    private RelativeLayout omnibox;
    private ImageButton omniboxRefresh;
    private ImageButton omniboxOverflow;
    private TextView omniboxTitle;
    private ProgressBar progressBar;
    private AlbumController currentAlbumController = null;
    private NinjaWebView ninjaWebView;
    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        return mView = inflater.inflate(R.layout.main, null);
    }

    @Override
    protected void initViews() {
        AppCompatDelegate.setCompatVectorFromResourcesEnabled(true);
        StrictMode.VmPolicy.Builder builder = new StrictMode.VmPolicy.Builder();
        StrictMode.setVmPolicy(builder.build());
        HelperUnit.grantPermissionsStorage(mContext);
        HelperUnit.setTheme(mContext);
        switcherPanel = mView.findViewById(R.id.switcher_panel);
        initOmnibox();
        switcherPanel.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
            @Override
            public void onGlobalLayout() {
                int heightDiff = switcherPanel.getRootView().getHeight() - switcherPanel.getHeight();
                if (currentAlbumController != null) {
                    if (heightDiff > 100) {
                        omniboxTitle.setVisibility(View.GONE);
                    } else {
                        omniboxTitle.setVisibility(View.VISIBLE);
                    }
                }
            }
        });
        switcherPanel.setStatusListener(new SwitcherPanel.StatusListener() {
            @Override
            public void onCollapsed() {
                inputBox.clearFocus();
                if (currentAlbumController != null) {
//                    switcherScroller.smoothScrollTo(currentAlbumController.getAlbumView().getLeft(), 0);
                }
            }
        });

        dispatchIntent(mContext.getIntent());
    }

    private void initOmnibox() {

        omnibox = mView.findViewById(R.id.main_omnibox);
        inputBox = mView.findViewById(R.id.main_omnibox_input);
        omniboxRefresh = mView.findViewById(R.id.omnibox_refresh);
        omniboxOverflow = mView.findViewById(R.id.omnibox_overflow);
        omniboxTitle = mView.findViewById(R.id.omnibox_title);
        progressBar = mView.findViewById(R.id.main_progress_bar);

        inputBox.setOnTouchListener(new SwipeToBoundListener(omnibox, new SwipeToBoundListener.BoundCallback() {
            private final KeyListener keyListener = inputBox.getKeyListener();

            @Override
            public boolean canSwipe() {
//                boolean ob = sp.getBoolean(getString(R.string.sp_omnibox_control), true);
//                return switcherPanel.isKeyBoardShowing() && ob;
                return false;
            }

            @Override
            public void onSwipe() {
                inputBox.setKeyListener(null);
                inputBox.setFocusable(false);
                inputBox.setFocusableInTouchMode(false);
                inputBox.clearFocus();
            }

            @Override
            public void onBound(boolean canSwitch, boolean left) {
                inputBox.setKeyListener(keyListener);
                inputBox.setFocusable(true);
                inputBox.setFocusableInTouchMode(true);
                inputBox.setInputType(InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
                inputBox.clearFocus();

//                if (canSwitch) {
//                    AlbumController controller = nextAlbumController(left);
//                    showAlbum(controller, false);
//                }
            }
        }));

        inputBox.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                if (currentAlbumController == null) { // || !(actionId == EditorInfo.IME_ACTION_DONE)
                    return false;
                }

                String query = inputBox.getText().toString().trim();
                if (query.isEmpty()) {
                    NinjaToast.show(mContext, getString(R.string.toast_input_empty));
                    return true;
                }

                updateAlbum(query);
                hideSoftInput(inputBox);
                return false;
            }
        });

        updateBookmarks();
        updateAutoComplete();

        omniboxRefresh.setOnClickListener(this);
        omniboxOverflow.setOnClickListener(this);

        omniboxOverflow.setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View v) {
                if (currentAlbumController != null && currentAlbumController instanceof NinjaWebView) {
//                    showSwitcher();
                }
                return false;
            }
        });
    }

    private void dispatchIntent(Intent intent) {
        Intent toHolderService = new Intent(mContext, HolderService.class);
        IntentUnit.setClear(false);
        mContext.stopService(toHolderService);

        String action = intent.getAction();

        if (intent.getAction() != null && intent.getAction().equals(Intent.ACTION_WEB_SEARCH)) {
            // From ActionMode and some others
            pinAlbums(intent.getStringExtra(SearchManager.QUERY));
//        } else if (filePathCallback != null) {
//            filePathCallback = null;
//        } else if ("sc_history".equals(action)) {
//            addAlbum(BrowserUnit.FLAG_HISTORY);
//        } else if ("sc_bookmark".equals(action)) {
//            addAlbum(BrowserUnit.FLAG_BOOKMARKS);
//        } else if ("sc_login".equals(action)) {
//            addAlbum(BrowserUnit.FLAG_PASS);
//        } else if ("sc_startPage".equals(action)) {
//            addAlbum(BrowserUnit.FLAG_HOME);
        } else if (Intent.ACTION_SEND.equals(action)) {
            pinAlbums(intent.getStringExtra(Intent.EXTRA_TEXT));
        } else {
            pinAlbums(null);
        }
        mContext.getIntent().setAction("");
    }

    private synchronized void pinAlbums(String url) {
//        showOmnibox();
        hideSoftInput(inputBox);
//        hideSearchPanel();
//        switcherContainer.removeAllViews();

        ninjaWebView = new NinjaWebView(mContext);

        for (AlbumController controller : BrowserContainer.list()) {
            if (controller instanceof NinjaWebView) {
                ((NinjaWebView) controller).setBrowserController(this);
            } else if (controller instanceof NinjaRelativeLayout) {
                ((NinjaRelativeLayout) controller).setBrowserController(this);
            }
//            switcherContainer.addView(controller.getAlbumView(), LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.MATCH_PARENT);
            controller.getAlbumView().setVisibility(View.VISIBLE);
            controller.deactivate();
        }

        if (BrowserContainer.size() < 1 && url == null) {
            addAlbum("http://www.baidu.com/","百度一下",true, null);
        } else if (BrowserContainer.size() >= 1 && url == null) {
            if (currentAlbumController != null) {
                currentAlbumController.activate();
                return;
            }
//
//            int index = BrowserContainer.size() - 1;
//            currentAlbumController = BrowserContainer.get(index);
//            contentFrame.removeAllViews();
//            contentFrame.addView((View) currentAlbumController);
//            currentAlbumController.activate();
//
//            updateOmnibox();
        } else { // When url != null
            ninjaWebView.setBrowserController(this);
            ninjaWebView.setFlag(BrowserUnit.FLAG_NINJA);
            ninjaWebView.setAlbumTitle(getString(R.string.album_untitled));
            ViewUnit.bound(mContext, ninjaWebView);
            ninjaWebView.loadUrl(url);

            BrowserContainer.add(ninjaWebView);
//            final View albumView = ninjaWebView.getAlbumView();
//            switcherContainer.addView(albumView, LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);
//            contentFrame.removeAllViews();
//            contentFrame.addView(ninjaWebView);
//
//            if (currentAlbumController != null) {
//                currentAlbumController.deactivate();
//            }
//            currentAlbumController = ninjaWebView;
//            currentAlbumController.activate();
//
//            updateOmnibox();
        }
    }

    private synchronized void updateAlbum(String url) {
        if (currentAlbumController == null) {
            return;
        }

        if (currentAlbumController instanceof NinjaWebView) {
            ((NinjaWebView) currentAlbumController).loadUrl(url);
//            updateOmnibox();
        } else if (currentAlbumController instanceof NinjaRelativeLayout) {
            ninjaWebView = new NinjaWebView(mContext);

            ninjaWebView.setBrowserController(this);
            ninjaWebView.setFlag(BrowserUnit.FLAG_NINJA);
            ninjaWebView.setAlbumTitle(getString(R.string.album_untitled));
            ViewUnit.bound(mContext, ninjaWebView);

//            int index = switcherContainer.indexOfChild(currentAlbumController.getAlbumView());
//            currentAlbumController.deactivate();
//            switcherContainer.removeView(currentAlbumController.getAlbumView());
//            contentFrame.removeAllViews(); ///
//
//            switcherContainer.addView(ninjaWebView.getAlbumView(), index, new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
//            contentFrame.addView(ninjaWebView);
//            BrowserContainer.set(ninjaWebView, index);
            currentAlbumController = ninjaWebView;
            ninjaWebView.activate();
            ninjaWebView.loadUrl(url);
//            updateOmnibox();
        } else {
            NinjaToast.show(mContext, getString(R.string.toast_load_error));
        }
    }

    private synchronized void addAlbum(String title, final String url, final boolean foreground, final Message resultMsg) {

//        showOmnibox();
        ninjaWebView = new NinjaWebView(mContext);
        ninjaWebView.setBrowserController(this);
        ninjaWebView.setFlag(BrowserUnit.FLAG_NINJA);
        ninjaWebView.setAlbumTitle(title);
        ViewUnit.bound(mContext, ninjaWebView);

        final View albumView = ninjaWebView.getAlbumView();
        if (currentAlbumController != null && (currentAlbumController instanceof NinjaWebView) && resultMsg != null) {
            int index = BrowserContainer.indexOf(currentAlbumController) + 1;
            BrowserContainer.add(ninjaWebView, index);
//            switcherContainer.addView(albumView, index, new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.MATCH_PARENT));
        } else {
            BrowserContainer.add(ninjaWebView);
//            switcherContainer.addView(albumView, LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);
        }

        if (!foreground) {
            ViewUnit.bound(mContext, ninjaWebView);
            ninjaWebView.loadUrl(url);
            ninjaWebView.deactivate();
            return;
        }

        showAlbum(ninjaWebView, true);

        if (url != null && !url.isEmpty()) {
            ninjaWebView.loadUrl(url);
        }
    }

    private void hideSoftInput(final EditText view) {
        view.clearFocus();
        InputMethodManager imm = (InputMethodManager) mContext.getSystemService(Context.INPUT_METHOD_SERVICE);
        assert imm != null;
        imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
    }

    private void showSoftInput(final EditText view) {
        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                view.requestFocus();
                InputMethodManager imm = (InputMethodManager) mContext.getSystemService(Context.INPUT_METHOD_SERVICE);
                assert imm != null;
                imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, 0);
            }
        }, 250);
    }


    @Override
    public void onClick(View v) {

    }

    @Override
    public void updateAutoComplete() {

    }

    @Override
    public void updateBookmarks() {

    }

    @Override
    public void updateInputBox(String query) {

    }

    @Override
    public void updateProgress(int progress) {

    }

    @Override
    public void showAlbum(AlbumController albumController, boolean expand) {

    }

    @Override
    public void removeAlbum(AlbumController albumController) {

    }

    @Override
    public void showFileChooser(ValueCallback<Uri[]> filePathCallback, WebChromeClient.FileChooserParams fileChooserParams) {

    }

    @Override
    public void onCreateView(WebView view, Message resultMsg) {

    }

    @Override
    public void onShowCustomView(View view, WebChromeClient.CustomViewCallback callback) {

    }

    @Override
    public boolean onHideCustomView() {
        return false;
    }

    @Override
    public void onLongPress(String url) {

    }
}
